"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/Introduction","docId":"Introduction","unlisted":false},{"type":"category","label":"Quick Start","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Server Testing","href":"/docs/Quick-Start/Server-Testing","docId":"Quick-Start/Server-Testing","unlisted":false},{"type":"link","label":"Client Testing","href":"/docs/Quick-Start/Client-Testing","docId":"Quick-Start/Client-Testing","unlisted":false},{"type":"link","label":"Viewing Results","href":"/docs/Quick-Start/Anvil-Web","docId":"Quick-Start/Anvil-Web","unlisted":false}],"href":"/docs/Quick-Start/index"},{"type":"link","label":"TLS-Anvil Result Analysis","href":"/docs/Result-Analysis","docId":"Result-Analysis","unlisted":false},{"type":"link","label":"Architecture","href":"/docs/Architecture","docId":"Architecture","unlisted":false},{"type":"category","label":"Adding New Tests","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Development Environment Setup","href":"/docs/Adding-New-Tests/Setup-Dev-Environment","docId":"Adding-New-Tests/Setup-Dev-Environment","unlisted":false},{"type":"link","label":"Test Template Example","href":"/docs/Adding-New-Tests/Test-Case-Example","docId":"Adding-New-Tests/Test-Case-Example","unlisted":false},{"type":"link","label":"Base IPMs","href":"/docs/Adding-New-Tests/IPM-Models","docId":"Adding-New-Tests/IPM-Models","unlisted":false},{"type":"link","label":"Modifying the IPM","href":"/docs/Adding-New-Tests/Modifying-the-IPM-Model","docId":"Adding-New-Tests/Modifying-the-IPM-Model","unlisted":false}],"href":"/docs/category/adding-new-tests"}]},"docs":{"Adding-New-Tests/IPM-Models":{"id":"Adding-New-Tests/IPM-Models","title":"Base IPMs","description":"TLS-Anvil provides 4 common IPM that specify which parameters are used as input for the combinatorial testing algorithm. The values are determined automatically based on the features the  supports and the constraints that are applied to restrict the parameter values.","sidebar":"tutorialSidebar"},"Adding-New-Tests/Modifying-the-IPM-Model":{"id":"Adding-New-Tests/Modifying-the-IPM-Model","title":"Modifying the IPM","description":"As described before, TLS-Anvil defines 4 common IPMs. Sometimes different parameters and/or parameter values should be part of the IPM. Therefore, the Anvil-Core-Framework provides several test template annotations that allow to modify a selected base IPM. Those are explained in the following.","sidebar":"tutorialSidebar"},"Adding-New-Tests/Setup-Dev-Environment":{"id":"Adding-New-Tests/Setup-Dev-Environment","title":"Development Environment Setup","description":"First our repository needs to be cloned.","sidebar":"tutorialSidebar"},"Adding-New-Tests/Test-Case-Example":{"id":"Adding-New-Tests/Test-Case-Example","title":"Test Template Example","description":"In the following we want to discuss a test template example.","sidebar":"tutorialSidebar"},"Architecture":{"id":"Architecture","title":"Architecture","description":"The picture below shows the general architecture of TLS-Anvil including the different phases that are executed during a test execution.","sidebar":"tutorialSidebar"},"Introduction":{"id":"Introduction","title":"Introduction","description":"Welcome to TLS-Anvil, our test suite for (D)TLS 1.2 and 1.3 servers and clients. TLS-Anvil currently includes around 400 test cases that are based on requirements derived from various TLS related RFCs listed below as well as attacks from the past. The tests are implemented in Java using JUnit, coffee4j and TLS-Attacker and aim to detect violations of the TLS specification by TLS servers or clients.","sidebar":"tutorialSidebar"},"Quick-Start/Anvil-Web":{"id":"Quick-Start/Anvil-Web","title":"Viewing Results","description":"TLS-Anvil stores the test results in multiple json files. In addition the network traffic is captured during the execution. Since analyzing those files by hand is tedious, we created a small web application to get the job done.","sidebar":"tutorialSidebar"},"Quick-Start/Client-Testing":{"id":"Quick-Start/Client-Testing","title":"Client Testing","description":"This site demonstrates how to test the OpenSSL client provided by the TLS-Docker-Library.","sidebar":"tutorialSidebar"},"Quick-Start/index":{"id":"Quick-Start/index","title":"Quick Start","description":"The quick start guide is showing you how to use TLS-Anvil to test a TLS server or client. This is basically a two step process. First TLS-Anvil is executed to perform the tests against the OpenSSL example server and client. TLS-Anvil as well as the OpenSSL server/client will run inside a Docker container. The TLS server/client images are provided by the TLS-Docker-Library project which we released alongside TLS-Anvil.","sidebar":"tutorialSidebar"},"Quick-Start/Server-Testing":{"id":"Quick-Start/Server-Testing","title":"Server Testing","description":"This site demonstrates how to test the OpenSSL server provided by the TLS-Docker-Library.","sidebar":"tutorialSidebar"},"Result-Analysis":{"id":"Result-Analysis","title":"TLS-Anvil Result Analysis","description":"Analyzing Servers and Clients using Anvil Web","sidebar":"tutorialSidebar"}}}}')}}]);