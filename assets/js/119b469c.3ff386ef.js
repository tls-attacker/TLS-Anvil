"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[510],{5255:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Quick-Start/Client-Testing","title":"Client Testing","description":"This page demonstrates how to test the OpenSSL client using the TLS-Docker-Library.","source":"@site/docs/01-Quick-Start/02-Client-Testing.md","sourceDirName":"01-Quick-Start","slug":"/Quick-Start/Client-Testing","permalink":"/docs/Quick-Start/Client-Testing","draft":false,"unlisted":false,"editUrl":"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/01-Quick-Start/02-Client-Testing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Server Testing","permalink":"/docs/Quick-Start/Server-Testing"},"next":{"title":"Viewing Results","permalink":"/docs/Quick-Start/Anvil-Web"}}');var r=t(4848),s=t(8453);const a={},l="Client Testing",o={},c=[{value:"Preparations",id:"preparations",level:3},{value:"Starting the TLS-Anvil Container",id:"starting-the-tls-anvil-container",level:3},{value:"Starting the OpenSSL Client Container",id:"starting-the-openssl-client-container",level:3},{value:"What Now?",id:"what-now",level:3}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"client-testing",children:"Client Testing"})}),"\n",(0,r.jsxs)(n.p,{children:["This page demonstrates how to test the OpenSSL client using the TLS-Docker-Library.",(0,r.jsx)(n.br,{}),"\n","You can also test other implementations\u2014for example, by ",(0,r.jsx)(n.a,{href:"/docs/Docker-Library",children:"using the TLS-Docker-Library"})," or by running your own client binary."]}),"\n",(0,r.jsxs)(n.p,{children:["Running the test suite in its simplest form typically takes around 15 minutes.",(0,r.jsx)(n.br,{}),"\n","However, the duration may increase depending on the ",(0,r.jsx)(n.code,{children:"strength"})," parameter, which defines how many variations of a single test case are executed with different parameters."]}),"\n",(0,r.jsx)(n.h3,{id:"preparations",children:"Preparations"}),"\n",(0,r.jsxs)(n.p,{children:["Just like with server testing, we first create a dedicated Docker network that allows the TLS-Anvil and OpenSSL client containers to communicate.",(0,r.jsx)(n.br,{}),"\n","If the network has already been created, you can skip this step."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker network create tls-anvil\n"})}),"\n",(0,r.jsx)(n.h3,{id:"starting-the-tls-anvil-container",children:"Starting the TLS-Anvil Container"}),"\n",(0,r.jsxs)(n.p,{children:["Since the client needs to connect to TLS-Anvil, the test suite container must be started first.",(0,r.jsx)(n.br,{}),"\n","Once running, the test suite will wait for the client to connect, so keep the terminal open."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:"showLineNumbers",children:"docker run \\\n    --rm \\\n    -it \\\n    --network tls-anvil \\\n    --name tls-anvil \\\n    -v $(pwd):/output/ \\\n    ghcr.io/tls-attacker/tlsanvil:latest \\\n    -zip \\\n    -parallelHandshakes 3 \\\n    -parallelTests 3 \\\n    -strength 1 \\\n    -identifier openssl-client \\\n    client \\\n    -port 8443 \\\n    -triggerScript curl --connect-timeout 2 openssl-client:8090/trigger\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lines 2\u20135: Docker-related command flags"}),"\n",(0,r.jsx)(n.li,{children:"Line 6: Mounts the current directory as the output directory"}),"\n",(0,r.jsx)(n.li,{children:"Line 7: Specifies the TLS-Anvil Docker image"}),"\n",(0,r.jsx)(n.li,{children:"Line 8: Compresses the results into a ZIP file for easier import into Anvil-Web"}),"\n",(0,r.jsx)(n.li,{children:"Lines 9\u201310: TLS-Anvil can run multiple tests and handshakes in parallel since the client can be started multiple times"}),"\n",(0,r.jsxs)(n.li,{children:["Line 11: Sets the ",(0,r.jsx)(n.code,{children:"strength"})," parameter for t-way combinatorial testing"]}),"\n",(0,r.jsx)(n.li,{children:"Line 12: Defines an identifier name that appears in the test report"}),"\n",(0,r.jsx)(n.li,{children:"Line 13: Indicates that we are testing a client"}),"\n",(0,r.jsx)(n.li,{children:"Line 14: Specifies the port TLS-Anvil listens on for client connections"}),"\n",(0,r.jsx)(n.li,{children:"Line 15: Provides a script that is executed before each handshake to trigger a new client connection. See explanation below."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["If you want the trigger script to execute on your host machine, we recommend to run the ",(0,r.jsx)(n.code,{children:"TLS-Anvil.jar"})," executable directly on your host machine using Java 21 or newer. The jar files can be found under ",(0,r.jsx)(n.a,{href:"https://github.com/tls-attacker/TLS-Anvil/releases",children:"Releases"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"starting-the-openssl-client-container",children:"Starting the OpenSSL Client Container"}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["As mentioned, we use OpenSSL as an example client.",(0,r.jsx)(n.br,{}),"\n","The OpenSSL client image used here is pre-built using the ",(0,r.jsx)(n.a,{href:"https://github.com/tls-attacker/tls-docker-library",children:"TLS-Docker-Library"}),".",(0,r.jsx)(n.br,{}),"\n","Its entrypoint is a small HTTP server that exposes two REST API endpoints on port 8090:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET /trigger"})," \u2014 starts the client"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET /shutdown"})," \u2014 shuts down the HTTP server and terminates the container"]}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["Start the client using the following command. This downloads a pre-built image from our GitHub Container Registry and runs it.",(0,r.jsx)(n.br,{}),"\n","Since TLS-Anvil is already running, open a new terminal to start the client."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:"showLineNumbers",children:"docker run \\\n    -d \\\n    --rm \\\n    --name openssl-client \\\n    --network tls-anvil \\\n    ghcr.io/tls-attacker/openssl-client:1.1.1i \\\n    -connect tls-anvil:8443\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lines 2\u20135: Docker-related command flags"}),"\n",(0,r.jsx)(n.li,{children:"Line 6: Specifies the OpenSSL client image from the TLS-Docker-Library"}),"\n",(0,r.jsxs)(n.li,{children:["Line 7: This argument is passed to the OpenSSL ",(0,r.jsx)(n.code,{children:"s_client"})," binary, which is executed each time a ",(0,r.jsx)(n.code,{children:"GET /trigger"})," request is sent to port 8090"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Note, that if you are using a platform beyond linux/amd64 (e.g., on a ",(0,r.jsx)(n.strong,{children:"Macbook"}),"), you might need to use the parameter ",(0,r.jsx)(n.code,{children:"--platform linux/amd64"})," to correctly start the image."]})}),"\n",(0,r.jsx)(n.h3,{id:"what-now",children:"What Now?"}),"\n",(0,r.jsxs)(n.p,{children:["After the test suite finishes, a folder named ",(0,r.jsx)(n.code,{children:"Results_..."})," will appear in your working directory.",(0,r.jsx)(n.br,{}),"\n","This folder contains all the test results. To analyze them, proceed to the next page."]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);