"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[510],{5255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Quick-Start/Client-Testing","title":"Client Testing","description":"This site demonstrates how to test the OpenSSL client provided by the TLS-Docker-Library.","source":"@site/docs/01-Quick-Start/02-Client-Testing.md","sourceDirName":"01-Quick-Start","slug":"/Quick-Start/Client-Testing","permalink":"/docs/Quick-Start/Client-Testing","draft":false,"unlisted":false,"editUrl":"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/01-Quick-Start/02-Client-Testing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Server Testing","permalink":"/docs/Quick-Start/Server-Testing"},"next":{"title":"Viewing Results","permalink":"/docs/Quick-Start/Anvil-Web"}}');var r=n(4848),s=n(8453);const a={},l="Client Testing",o={},c=[{value:"Preparations",id:"preparations",level:3},{value:"Starting the TLS-Anvil container",id:"starting-the-tls-anvil-container",level:3},{value:"Starting the OpenSSL client container",id:"starting-the-openssl-client-container",level:3},{value:"What now?",id:"what-now",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"client-testing",children:"Client Testing"})}),"\n",(0,r.jsxs)(t.p,{children:["This site demonstrates how to test the OpenSSL client provided by the TLS-Docker-Library.\nYou can of course also test other implementations, for example by ",(0,r.jsx)(t.a,{href:"/docs/Docker-Library",children:"using the TLS-Docker-Library"})," or by running your own client binary."]}),"\n",(0,r.jsx)(t.p,{children:"Testing the client in the most simple form roughly takes around 15 minutes.\nHowever, this duration can increase to several depending on the strength parameter that basically defines how often a single test case is performed with different parameters."}),"\n",(0,r.jsx)(t.h3,{id:"preparations",children:"Preparations"}),"\n",(0,r.jsx)(t.p,{children:"Similar to the server test we first create a dedicated docker network that is used by the TLS-Anvil and OpenSSL client container to communicate with each other. If it is already created, no need to recreate it."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker network create tls-anvil\n"})}),"\n",(0,r.jsx)(t.h3,{id:"starting-the-tls-anvil-container",children:"Starting the TLS-Anvil container"}),"\n",(0,r.jsx)(t.p,{children:"Since the client has to connect to TLS-Anvil the test suite container is started first.\nAfter starting, the testsuite is waiting for the client to connect, so leave the terminal open."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:"showLineNumbers",children:"docker run \\\n    --rm \\\n    -it \\\n    --network tls-anvil \\\n    --name tls-anvil \\\n    -v $(pwd):/output/ \\\n    ghcr.io/tls-attacker/tlsanvil:latest \\\n    -zip \\\n    -parallelHandshakes 3 \\\n    -parallelTests 3 \\\n    -strength 1 \\\n    -identifier openssl-client \\\n    client \\\n    -port 8443 \\\n    -triggerScript curl --connect-timeout 2 openssl-client:8090/trigger\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Lines 2-5: Docker related command flags"}),"\n",(0,r.jsx)(t.li,{children:"Line 6: Set the output directory through a docker volume"}),"\n",(0,r.jsx)(t.li,{children:"Line 7: Specifies the TLS-Anvil docker image"}),"\n",(0,r.jsx)(t.li,{children:"Line 8: Zip the results, that way we can easily import them into Anvil-Web later"}),"\n",(0,r.jsx)(t.li,{children:"Lines 9-10: Since the client can started multiple times, TLS-Anvil can run multiple tests and handshakes in parallel"}),"\n",(0,r.jsxs)(t.li,{children:["Line 11: Defines the strength, i.e. the ",(0,r.jsx)(t.code,{children:"t"})," for t-way combinatorial testing"]}),"\n",(0,r.jsx)(t.li,{children:"Line 12: Defines an arbitrary name that is written to the report"}),"\n",(0,r.jsx)(t.li,{children:"Line 13: We want to test a client"}),"\n",(0,r.jsx)(t.li,{children:"Line 14: The port on which TLS-Anvil listens to accept requests from the client"}),"\n",(0,r.jsx)(t.li,{children:"Line 15: Specifies a script that is executed before each handshake, which the goal to trigger a connection from the client. See below how this works."}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"starting-the-openssl-client-container",children:"Starting the OpenSSL client container"}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsxs)(t.p,{children:["As mentioned before, we use OpenSSL as an example.\nThe OpenSSL client image in this example is prebuilt using the ",(0,r.jsx)(t.a,{href:"https://github.com/tls-attacker/tls-docker-library",children:"TLS-Docker-Library"}),". The entrypoint of the client images is a small HTTP server that provides two REST-API endpoints on port 8090."]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"GET /trigger"})," starts the client"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"GET /shutdown"})," shutdown the HTTP server to terminate the container"]}),"\n"]})]}),"\n",(0,r.jsx)(t.p,{children:"Starting the client can be done with the following command. This will download a pre-built image from our GitHub registry, and run it.\nSince TLS-Anvil is already running, open another terminal to start the client."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:"showLineNumbers",children:"docker run \\\n    -d \\\n    --rm \\\n    --name openssl-client \\\n    --network tls-anvil \\\n    ghcr.io/tls-attacker/openssl-client:1.1.1i \\\n    -connect tls-anvil:8443\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Lines 2-5: Docker related command flags"}),"\n",(0,r.jsx)(t.li,{children:"Line 6: Specifies the OpenSSL client image from the TLS-Docker-Library"}),"\n",(0,r.jsxs)(t.li,{children:["Line 7: This is passed to the OpenSSL ",(0,r.jsx)(t.code,{children:"s_client"})," binary, which is started each time a HTTP-GET request is sent to ",(0,r.jsx)(t.code,{children:":8090/trigger"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"what-now",children:"What now?"}),"\n",(0,r.jsxs)(t.p,{children:["After the testsuite finished you should see a folder named ",(0,r.jsx)(t.code,{children:"Results_..."})," which contains all the results.\nTo analyze them, go to the next page."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);