"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[370],{719:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Quick-Start/Anvil-Web","title":"Viewing Results","description":"TLS-Anvil stores test results in multiple json files. Additionally, all network traffic is captured during execution.","source":"@site/docs/01-Quick-Start/03-Anvil-Web.md","sourceDirName":"01-Quick-Start","slug":"/Quick-Start/Anvil-Web","permalink":"/docs/Quick-Start/Anvil-Web","draft":false,"unlisted":false,"editUrl":"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/01-Quick-Start/03-Anvil-Web.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Client Testing","permalink":"/docs/Quick-Start/Client-Testing"},"next":{"title":"TLS-Anvil Result Analysis","permalink":"/docs/Result-Analysis"}}');var n=s(4848),l=s(8453),a=(s(1028),s(7400));const r={},o="Viewing Results",d={},c=[{value:"Start the Application",id:"start-the-application",level:3},{value:"Basic Principles",id:"basic-principles",level:2},{value:"Importing the Results",id:"importing-the-results",level:3},{value:"Using the Application",id:"using-the-application",level:3},{value:"Possible Test Results",id:"possible-test-results",level:3},{value:"Result Annotations",id:"result-annotations",level:3}];function h(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"viewing-results",children:"Viewing Results"})}),"\n",(0,n.jsxs)(t.p,{children:["TLS-Anvil stores test results in multiple ",(0,n.jsx)(t.code,{children:"json"})," files. Additionally, all network traffic is captured during execution.",(0,n.jsx)(t.br,{}),"\n","Since manually analyzing these files is tedious, we created a web application called ",(0,n.jsx)(t.strong,{children:"Anvil-Web"})," to simplify the process."]}),"\n",(0,n.jsxs)(t.p,{children:["The result analyzer is packaged as a Docker container. Because it requires a database, the easiest way to start it is with ",(0,n.jsx)(t.code,{children:"docker compose"}),".",(0,n.jsx)(t.br,{}),"\n","A ",(0,n.jsx)(t.code,{children:"docker-compose.yml"})," file is available in the ",(0,n.jsx)(t.a,{href:"https://github.com/tls-attacker/Anvil-Web",children:"Anvil-Web GitHub Repository"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["\ud83d\udc49 ",(0,n.jsx)(t.a,{href:"https://github.com/tls-attacker/Anvil-Web/blob/main/docker-compose.yml",children:"Download docker-compose.yml"})]}),"\n",(0,n.jsx)(t.h3,{id:"start-the-application",children:"Start the Application"}),"\n",(0,n.jsxs)(t.p,{children:["First, download the ",(0,n.jsx)(t.code,{children:"docker-compose.yml"})," file.",(0,n.jsx)(t.br,{}),"\n","Then, in the same directory as the file, run the following commands to start the web application.",(0,n.jsx)(t.br,{}),"\n","This will pull the prebuilt Anvil-Web images and launch the web server."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"docker compose pull\ndocker compose up -d\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Once started, the application should be available at ",(0,n.jsx)(t.a,{href:"http://localhost:5001",children:"http://localhost:5001"}),"."]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["For a more detailed overview of Anvil-Web\u2019s features, see ",(0,n.jsx)(t.a,{href:"../Result-Analysis",children:"Result Analysis"}),".",(0,n.jsx)(t.br,{}),"\n","Below is a brief description of the core concepts."]})}),"\n",(0,n.jsx)(t.h2,{id:"basic-principles",children:"Basic Principles"}),"\n",(0,n.jsx)(t.h3,{id:"importing-the-results",children:"Importing the Results"}),"\n",(0,n.jsxs)(t.p,{children:["Next, import the results generated by TLS-Anvil into Anvil-Web.",(0,n.jsx)(t.br,{}),"\n","This involves uploading the JSON files to a MongoDB backend used by the web application."]}),"\n",(0,n.jsxs)(t.p,{children:["The easiest method is to zip your results folder (which contains ",(0,n.jsx)(t.code,{children:"report.json"}),") and upload it through the web interface.",(0,n.jsx)(t.br,{}),"\n","If you used the ",(0,n.jsx)(t.code,{children:"-zip"})," flag when running TLS-Anvil, the zipped results file is already available in the results folder."]}),"\n",(0,n.jsx)(t.p,{children:"To upload:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Navigate to ",(0,n.jsx)(t.code,{children:"Tests"})," \u2192 ",(0,n.jsx)(t.code,{children:"Upload Test"})]}),"\n",(0,n.jsxs)(t.li,{children:["Select the ",(0,n.jsx)(t.code,{children:".zip"})," file you want to import"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"using-the-application",children:"Using the Application"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Open your browser and go to ",(0,n.jsx)(t.a,{href:"http://localhost:5001",children:"http://localhost:5001"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Click on ",(0,n.jsx)(t.code,{children:"Tests"})," in the navigation bar (if not already selected), and find the test you uploaded. Click ",(0,n.jsx)(t.code,{children:"Details"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["You'll see an overview of the test results. Each ",(0,n.jsx)(a.A,{id:"test template"})," is listed in a table at the bottom, sorted by RFC."]}),"\n",(0,n.jsxs)(t.li,{children:["Click on any table row to view detailed information about that test:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["You'll see what was tested and the outcome for each ",(0,n.jsx)(a.A,{id:"test input"}),", i.e., each handshake attempt."]}),"\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"Parameter Combination"})," section displays the input generated by the combinatorial testing algorithm."]}),"\n",(0,n.jsx)(t.li,{children:"You can also view the recorded PCAP dump and handshake details for each test case."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"possible-test-results",children:"Possible Test Results"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Strictly Succeeded (\u2705)"}),(0,n.jsx)(t.br,{}),"\n","The ",(0,n.jsx)(a.A,{id:"SUT"})," (System Under Test) behaved exactly as expected for all ",(0,n.jsx)(a.A,{id:"test cases"})," under a given ",(0,n.jsx)(a.A,{id:"test template"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Conceptually Succeeded (\u26a0\ufe0f\u2705)"}),(0,n.jsx)(t.br,{}),"\n","The ",(0,n.jsx)(a.A,{id:"SUT"})," didn\u2019t fully conform to the RFC\u2014e.g., missing an alert or using an incorrect alert description\u2014but still behaved functionally correct."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Partially Failed (\u26a0\ufe0f\u274c)"}),(0,n.jsx)(t.br,{}),"\n","Some ",(0,n.jsx)(a.A,{id:"test inputs"})," under a ",(0,n.jsx)(a.A,{id:"test template"})," failed, while others succeeded."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Fully Failed (\u274c)"}),(0,n.jsx)(t.br,{}),"\n","None of the ",(0,n.jsx)(a.A,{id:"test inputs"})," passed for the given ",(0,n.jsx)(a.A,{id:"test template"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"result-annotations",children:"Result Annotations"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Additional Information (\u2757\ufe0f)"}),(0,n.jsx)(t.br,{}),"\n","Some test templates highlight extra context that influenced the result. These annotations are shown as \u2757\ufe0f and are visible when hovering over a test result."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Contradictory Additional Information (\u2049\ufe0f)"}),(0,n.jsx)(t.br,{}),"\n","If test cases within the same template include conflicting additional information, the result is annotated with \u2049\ufe0f.",(0,n.jsx)(t.br,{}),"\n","This may indicate inconsistent behavior. You can filter these in the result view."]})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},7400:(e,t,s)=>{s.d(t,{A:()=>o});s(6540);var i=s(6822);s(8091);const n={tag:"tag_sbMh"},l={ipm:{long:"Input Parameter Model",definition:"Contains all relevant test parameters and their values. The IPM is used to generate the test inputs (one value is assigned to each parameter) by using t-way combinatorial testing. Seperate IPMs are defined for each test template, depending on the requirement that the test template checks. Dynamically inserted constraints are applied to the IPM to ensure that for each parameter only values are used that are supported by the SUT."},sut:{long:"System Under Test",definition:"The TLS client or server that you want to test using TLS-Anvil."},"test input(s)?":{long:"Test Input",definition:"A test input is basically a dictionary that contains a single value for each parameter of an IPM. Test inputs are automatically generated from the IPM using t-way combinatorial testing. A test template is executed multiple times using a different test input for each execution."},"test template(s)?":{long:"Test Template",definition:"A test template defines the desired outcome for all test cases derived from it. Thus, it represents a test oracle that is applicable to all derived test cases. Each test template tests a different requirement and is implemented as a normal JUnit test. It basically consists of two building blocks. First it defines which TLS messages are sent and expected to be received by the test suite. Second, it defines when a test case succeeds or fails."},"test case(s)?":{long:"Test Case",definition:"A test case is the (automatically) instantiated version of test template with one specific test input."}};var a=s(4848);const r=Object.keys(l);function o({id:e}){const t=r.map((t=>[new RegExp(t,"i").test(e),t])).filter((e=>e[0]))[0][1],s=l[t];return(0,a.jsx)(a.Fragment,{children:(0,a.jsx)(i.Ay,{content:(0,a.jsx)(d,{details:s}),placement:"bottom",arrow:!0,hideOnClick:!0,children:(0,a.jsxs)("span",{className:n.tag,children:[e,"\xa0\u24d8"]})})})}function d({details:e}){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("div",{children:e.long}),(0,a.jsx)("hr",{style:{marginTop:"4px",marginBottom:"4px"}}),(0,a.jsx)("div",{children:e.definition})]})}}}]);