"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[115],{1293:function(e,t,n){n.d(t,{Z:function(){return l}});var i=n(7294),a=n(860),s=(n(8846),"tag_sbMh"),r={ipm:{long:"Input Parameter Model",definition:"Contains all relevant test parameters and their values. The IPM is used to generate the test inputs (one value is assigned to each parameter) by using t-way combinatorial testing. Seperate IPMs are defined for each test template, depending on the requirement that the test template checks. Dynamically inserted constraints are applied to the IPM to ensure that for each parameter only values are used that are supported by the SUT."},sut:{long:"System Under Test",definition:"The TLS client or server that you want to test using TLS-Anvil."},"test input(s)?":{long:"Test Input",definition:"A test input is basically a dictionary that contains a single value for each parameter of an IPM. Test inputs are automatically generated from the IPM using t-way combinatorial testing. A test template is executed multiple times using a different test input for each execution."},"test template(s)?":{long:"Test Template",definition:"A test template defines the desired outcome for all test cases derived from it. Thus, it represents a test oracle that is applicable to all derived test cases. Each test template tests a different requirement and is implemented as a normal JUnit test. It basically consists of two building blocks. First it defines which TLS messages are sent and expected to be received by the test suite. Second, it defines when a test case succeeds or fails."},"test case(s)?":{long:"Test Case",definition:"A test case is the (automatically) instantiated version of test template with one specific test input."}},o=Object.keys(r);function l(e){var t=e.id,n=o.map((function(e){return[new RegExp(e,"i").test(t),e]})).filter((function(e){return e[0]}))[0][1],l=r[n];return i.createElement(i.Fragment,null,i.createElement(a.ZP,{content:i.createElement(c,{details:l}),placement:"bottom",arrow:!0,hideOnClick:!0},i.createElement("span",{className:s},t,"\xa0\u24d8")))}function c(e){var t=e.details;return i.createElement(i.Fragment,null,i.createElement("div",null,t.long),i.createElement("hr",{style:{marginTop:"4px",marginBottom:"4px"}}),i.createElement("div",null,t.definition))}},1639:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return h}});var i=n(7462),a=n(3366),s=(n(7294),n(3905)),r=n(1293),o=["components"],l={},c="Architecture",u={unversionedId:"Architecture",id:"Architecture",title:"Architecture",description:"The picture below shows the general architecture of TLS-Anvil including the different phases that are executed during a test execution.",source:"@site/docs/03-Architecture.md",sourceDirName:".",slug:"/Architecture",permalink:"/docs/Architecture",draft:!1,editUrl:"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/03-Architecture.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Result Analysis",permalink:"/docs/Quick-Start/Result-Analysis"},next:{title:"Adding New Tests",permalink:"/docs/category/adding-new-tests"}},d={},h=[{value:"Code related information",id:"code-related-information",level:3}],p={toc:h};function m(e){var t=e.components,l=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,i.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"architecture"},"Architecture"),(0,s.kt)("p",null,"The picture below shows the general architecture of TLS-Anvil including the different phases that are executed during a test execution.\nEach of those phases is explained in our USENIX Security Paper in Section 4.1. Please have a look there."),(0,s.kt)("p",null,(0,s.kt)("img",{src:n(1422).Z,width:"1402",height:"565"})),(0,s.kt)("h3",{id:"code-related-information"},"Code related information"),(0,s.kt)("p",null,"TLS-Anvil is written in Java and uses the following libraries."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://junit.org/junit5"},"JUnit 5")," - Testing engine. TLS-Anvil heavily uses the extension system of JUnit."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/tls-attacker/TLS-Attacker"},"TLS-Attacker")," - TLS Stack."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/tls-attacker/TLS-Scanner"},"TLS-Scanner")," - TLS-Attacker based scanner, used for feature extraction."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://coffee4j.github.io/"},"coffee4j")," - Combinatorial testing library.")),(0,s.kt)("p",null,"Every ",(0,s.kt)(r.Z,{id:"test template",mdxType:"Definition"})," is a JUnit test function with additional java annotations that define an ",(0,s.kt)(r.Z,{id:"IPM",mdxType:"Definition"})," and most importantly to use the test lifecycle execution of TLS-Anvil that exchanges TLS messages with the SUT."),(0,s.kt)("p",null,"TLS-Anvil is structured into two java modules.  "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"TLS-Testsuite: The main module that contains all the templates that are located inside the ",(0,s.kt)("inlineCode",{parentName:"li"},"de.rub.nds.tlstest.suite.tests")," package. This package contains further packages that divides the tests into ",(0,s.kt)("inlineCode",{parentName:"li"},"server")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"client")," tests or tests that work for ",(0,s.kt)("inlineCode",{parentName:"li"},"both")," peers. Inside those packages are the tests are further divided by RFCs."),(0,s.kt)("li",{parentName:"ul"},"TLS-Test-Framework: This module contains all JUnit extensions and test execution logic.")),(0,s.kt)("p",null,"See the next chapter for an example test template and how new templates can be added."))}m.isMDXComponent=!0},1422:function(e,t,n){t.Z=n.p+"assets/images/Architecture-40dfc74d544fd3fdfa84308722816afd.png"}}]);