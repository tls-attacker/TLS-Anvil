"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[561],{1808:(e,t,n)=>{n.d(t,{A:()=>l});n(6540);var i=n(6822);n(1806);const s={tag:"tag_sbMh"},a={ipm:{long:"Input Parameter Model",definition:"Contains all relevant test parameters and their values. The IPM is used to generate the test inputs (one value is assigned to each parameter) by using t-way combinatorial testing. Seperate IPMs are defined for each test template, depending on the requirement that the test template checks. Dynamically inserted constraints are applied to the IPM to ensure that for each parameter only values are used that are supported by the SUT."},sut:{long:"System Under Test",definition:"The TLS client or server that you want to test using TLS-Anvil."},"test input(s)?":{long:"Test Input",definition:"A test input is basically a dictionary that contains a single value for each parameter of an IPM. Test inputs are automatically generated from the IPM using t-way combinatorial testing. A test template is executed multiple times using a different test input for each execution."},"test template(s)?":{long:"Test Template",definition:"A test template defines the desired outcome for all test cases derived from it. Thus, it represents a test oracle that is applicable to all derived test cases. Each test template tests a different requirement and is implemented as a normal JUnit test. It basically consists of two building blocks. First it defines which TLS messages are sent and expected to be received by the test suite. Second, it defines when a test case succeeds or fails."},"test case(s)?":{long:"Test Case",definition:"A test case is the (automatically) instantiated version of test template with one specific test input."}};var r=n(4848);const o=Object.keys(a);function l(e){let{id:t}=e;const n=o.map((e=>[new RegExp(e,"i").test(t),e])).filter((e=>e[0]))[0][1],l=a[n];return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(i.Ay,{content:(0,r.jsx)(d,{details:l}),placement:"bottom",arrow:!0,hideOnClick:!0,children:(0,r.jsxs)("span",{className:s.tag,children:[t,"\xa0\u24d8"]})})})}function d(e){let{details:t}=e;return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{children:t.long}),(0,r.jsx)("hr",{style:{marginTop:"4px",marginBottom:"4px"}}),(0,r.jsx)("div",{children:t.definition})]})}},8602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Adding-New-Tests/Test-Case-Example","title":"Test Template Example","description":"In the following we want to discuss a test template example.","source":"@site/docs/05-Adding-New-Tests/02-Test-Case-Example.md","sourceDirName":"05-Adding-New-Tests","slug":"/Adding-New-Tests/Test-Case-Example","permalink":"/docs/Adding-New-Tests/Test-Case-Example","draft":false,"unlisted":false,"editUrl":"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/05-Adding-New-Tests/02-Test-Case-Example.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Development Environment Setup","permalink":"/docs/Adding-New-Tests/Setup-Dev-Environment"},"next":{"title":"Base IPMs","permalink":"/docs/Adding-New-Tests/IPM-Models"}}');var s=n(4848),a=n(8453),r=n(1808);const o={},l="Test Template Example",d={},c=[{value:"Annotations",id:"annotations",level:3},{value:"Test function",id:"test-function",level:3},{value:"Metadata",id:"metadata",level:3}];function h(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"test-template-example",children:"Test Template Example"})}),"\n",(0,s.jsxs)(t.p,{children:["In the following we want to discuss a test template example.\nThis template aims to test if the ",(0,s.jsx)(r.A,{id:"SUT"})," sends the correct TLS alert, if the CBC padding is incorrect. This test works for client and servers by changing the first application message to use an invalid padding. The template is only executed when the SUT supports a CBC Cipher Suite, otherwise it is skipped. The padding error is injected into multiple positions. The positions are determined by combinatorial testing."]}),"\n",(0,s.jsx)(t.h3,{id:"annotations",children:"Annotations"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Line 1: Generic ",(0,s.jsx)(t.code,{children:"AnvilTest"})," annotation that activates the Anvil-Core test execution lifecycle. In addition basic parameters are added automatically to the ",(0,s.jsx)(r.A,{id:"IPM"}),". An id is also given, which has to be unique and will be referenced in the test metadata."]}),"\n",(0,s.jsxs)(t.li,{children:["Line 2-5: Those annotations modify the IPM","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Line 2: Changes the default IPM model"}),"\n",(0,s.jsx)(t.li,{children:"Line 3: Adds additional parameters to the IPM"}),"\n",(0,s.jsxs)(t.li,{children:["Line 4: Adds a constraint to the Cipher Suite parameter of the IPM, so that the test only runs when a CBC Cipher Suite is selected. The ",(0,s.jsx)(t.code,{children:"isCBC"})," method is called on the TLS-Attacker Cipher Suite enum."]}),"\n",(0,s.jsxs)(t.li,{children:["Line 5: Adds a constraint to the Record Length parameter. The ",(0,s.jsx)(t.code,{children:"recordLengthAllowsModification"})," method is called on the current class (line 43), given the selected value as argument."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"test-function",children:"Test function"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Line 7: This is line basically part of every test case, it generates the TLS-Attacker ",(0,s.jsx)(t.code,{children:"Config"})," that defines how the TLS-Attacker Server/Client should behave (e.g. which algorithms are offered, etc.)"]}),"\n",(0,s.jsx)(t.li,{children:"Line 8-12: A bitmask is generated and XORed on the padding. During the parameter value generation a byte and bit position is chosen by the combinatorial testing algorithm. From those positions, the bitmask is generated during the test execution."}),"\n",(0,s.jsxs)(t.li,{children:["Line 14-15: An application message is created from which the padding is invalidated. The message that is received from the config is set inside the ",(0,s.jsx)(t.code,{children:"AppMsgLengthDerivation.applyToConfig"})," method."]}),"\n",(0,s.jsxs)(t.li,{children:["Line 17-21: A TLS-Attacker ",(0,s.jsx)(t.code,{children:"WorkflowTrace"})," is generated that performs a complete handshake and sends an application message after the handshake."]}),"\n",(0,s.jsxs)(t.li,{children:["Line 23-29: The WorkflowTrace is scheduled to be sent. After the handshake is completed, the lambda function get's executed that determines the test result for a single ",(0,s.jsx)(r.A,{id:"test case"}),". The result of the test template is determined by all test case results."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",metastring:"showLineNumbers",children:'@AnvilTest(id = "5246-RNB9LX21i9")\n@ModelFromScope(modelType = "CERTIFICATE")\n@IncludeParameters({@IncludeParameter("APP_MSG_LENGHT"), @IncludeParameter("PADDING_BITMASK")})\n@ValueConstraints({@ValueConstraint(identifier = "CIPHER_SUITE", method = "isCBC")})\n@DynamicValueConstraints(affectedIdentifiers = "RECORD_LENGTH", methods = "recordLengthAllowsModification")\npublic void invalidCBCPadding(AnvilTestCase testCase, WorkflowRunner runner) {\n    Config c = getPreparedConfig(runner);\n    byte[] modificationBitmask = parameterCombination.buildBitmask();\n\n    Record record = new Record();\n    record.setComputations(new RecordCryptoComputations());\n    record.getComputations().setPadding(Modifiable.xor(modificationBitmask, 0));\n\n    ApplicationMessage appData = new ApplicationMessage();\n    appData.setData(Modifiable.explicit(c.getDefaultApplicationMessageData().getBytes()));\n\n    SendAction sendAction = new SendAction(appData);\n    sendAction.setRecords(record);\n\n    WorkflowTrace workflowTrace = runner.generateWorkflowTrace(WorkflowTraceType.HANDSHAKE);\n    workflowTrace.addTlsActions(sendAction, new ReceiveAction(new AlertMessage()));\n\n    runner.execute(workflowTrace, c).validateFinal(i -> {\n        WorkflowTrace trace = i.getWorkflowTrace();\n        Validator.receivedFatalAlert(i);\n\n        AlertMessage msg = trace.getFirstReceivedMessage(AlertMessage.class);\n        Validator.testAlertDescription(i, AlertDescription.BAD_RECORD_MAC, msg);\n    });\n}\n\npublic boolean recordLengthAllowsModification(Integer lengthCandidate) {\n    return lengthCandidate >= 50;\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"metadata",children:"Metadata"}),"\n",(0,s.jsxs)(t.p,{children:["A metadata entry has to be provided for every test. It is stored in ",(0,s.jsx)(t.code,{children:"src/main/resources/metadata.json"}),". A basic entry looks like this:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The metadata file is a json object which keys are the test ids."}),"\n",(0,s.jsxs)(t.li,{children:["Line 2: Id of the test template (see ",(0,s.jsx)(t.a,{href:"#test-function",children:"Test function"}),")."]}),"\n",(0,s.jsx)(t.li,{children:"Line 3: A description taken from the RFC."}),"\n",(0,s.jsx)(t.li,{children:"Line 4-10: Each test can have categories and a severity levels. Depending on the test result, a score is calculated for each test. Since it is not possible to choose the categories and severity levels objectively, those are not mentioned in our USENIX Security paper."}),"\n",(0,s.jsx)(t.li,{children:"Line 11-14: (optional) Referenced RFC number and section."}),"\n",(0,s.jsx)(t.li,{children:"Line 15-21: (optional) Tags used for searching test results."}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:"showLineNumbers",children:'{\n    "5246-RNB9LX21i9": {\n        "description": "Each uint8 in the padding data vector MUST be filled with the padding length value. The receiver MUST check this padding and MUST use the bad_record_mac alert to indicate padding errors.",\n        "severityLevels": {\n            "Crypto": 100,\n            "Security": 80,\n            "RecordLayer": 100,\n            "Interoperability": 80,\n            "Alert": 80\n        },\n        "rfc": {\n            "number": 5246,\n            "section": "6.2.3.2 CBC Block Cipher"\n        },\n        "tags": [\n            "both",\n            "tls12",\n            "rfc5246",\n            "CBCBlockCipher",\n            "invalidCBCPadding"\n        ]\n    },\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);