"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[487],{8945:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>h});var n=s(5893),a=s(1151),i=s(6797),r=s(1293);const l={},d="Base IPMs",o={id:"Adding-New-Tests/IPM-Models",title:"Base IPMs",description:"TLS-Anvil provides 4 common IPM that specify which parameters are used as input for the combinatorial testing algorithm. The values are determined automatically based on the features the  supports and the constraints that are applied to restrict the parameter values.",source:"@site/docs/05-Adding-New-Tests/03-IPM-Models.md",sourceDirName:"05-Adding-New-Tests",slug:"/Adding-New-Tests/IPM-Models",permalink:"/docs/Adding-New-Tests/IPM-Models",draft:!1,unlisted:!1,editUrl:"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/05-Adding-New-Tests/03-IPM-Models.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test Template Example",permalink:"/docs/Adding-New-Tests/Test-Case-Example"},next:{title:"Modifying the IPM",permalink:"/docs/Adding-New-Tests/Modifying-the-IPM-Model"}},c={},h=[];function m(e){const t={code:"code",h1:"h1",li:"li",p:"p",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"base-ipms",children:"Base IPMs"}),"\n",(0,n.jsxs)(t.p,{children:["TLS-Anvil provides 4 common IPM that specify which parameters are used as input for the combinatorial testing algorithm. The values are determined automatically based on the features the ",(0,n.jsx)(r.Z,{id:"SUT"})," supports and the constraints that are applied to restrict the parameter values."]}),"\n",(0,n.jsxs)(t.p,{children:["The models are specified inside the ",(0,n.jsx)(i.Z,{path:"TLS-Test-Framework/src/main/java/de/rub/nds/tlstest/framework/anvil/TlsModelTypes.java"})," enum. Which one is used is specified by annotating a test template with the ",(0,n.jsx)(t.code,{children:"@ModelFromScope"})," annotation."]}),"\n",(0,n.jsxs)(t.p,{children:["By default the ",(0,n.jsx)(t.code,{children:"GENERIC"})," model is used, since the ",(0,n.jsx)(t.code,{children:"@ModelFromScope"})," annotation is part of the ",(0,n.jsx)(i.Z,{path:"TLS-Test-Framework/src/main/java/de/rub/nds/tlstest/framework/testClasses/TlsBaseTest.java"})," base class."]}),"\n",(0,n.jsx)(t.p,{children:"In the following, the 4 base models are listed with their corresponding parameters."}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"EMPTY"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"No parameters"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"GENERIC"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CIPHERSUITE"})," (",(0,n.jsx)("a",{href:"https://github.com/tls-attacker/TLS-Attacker/blob/main/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/constants/CipherSuite.java",children:"CipherSuite"})," enum)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"NAMED_GROUP"})," (",(0,n.jsx)("a",{href:"https://github.com/tls-attacker/TLS-Attacker/blob/main/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/constants/NamedGroup.java",children:"NamedGroup"})," enum)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"RECORD_LENGTH"})," (Integer)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"TCP_FRAGMENTATION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_CHANGE_CIPHER_SPEC"})," (Boolean) (TLS 1.3 only)"]}),"\n",(0,n.jsx)(t.li,{children:"Server tests:"}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_ALPN_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_HEARTBEAT_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_PADDING_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_RENEGOTIATION_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_EXTENDED_MASTER_SECRET_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_SESSION_TICKET_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"MAX_FRAGMENT_LENGTH"})," (",(0,n.jsx)("a",{href:"https://github.com/tls-attacker/TLS-Attacker/blob/main/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/constants/MaxFragmentLength.java",children:"MaxFragmentLength"})," enum)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_ENCRYPT_THEN_MAC_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_PSK_EXCHANGE_MODES_EXTENSION"})," (Boolean, TLS 1.3 only)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_GREASE_CIPHER_SUITES"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_GREASE_NAMED_GROUPS"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_GREASE_SIG_HASH_ALGORITHMS"})," (Boolean)"]}),"\n",(0,n.jsx)(t.li,{children:"Client tests:"}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_ENCRYPT_THEN_MAC_EXTENSION"})," (Boolean)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INCLUDE_EXTENDED_MASTER_SECRET_EXTENSION"})," (Boolean)"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CERTIFICATE"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Same as generic"}),"\n",(0,n.jsx)(t.li,{children:"Client tests:"}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CERTIFICATE"})," (Certificates with different keys)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"SIG_HASH_ALGORITHM"})," (",(0,n.jsx)("a",{href:"https://github.com/tls-attacker/TLS-Attacker/blob/main/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/constants/SignatureAndHashAlgorithm.java",children:"SignatureAndHashAlgorithm"})," enum)"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"LENGTHFIELD"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Same as ",(0,n.jsx)(t.code,{children:"CERTIFICATE"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Beside those parameters, many more are available that are specified inside the ",(0,n.jsx)(i.Z,{path:"TLS-Test-Framework/src/main/java/de/rub/nds/tlstest/framework/model/TlsParameterType.java"})," enum."]}),"\n",(0,n.jsxs)(t.p,{children:["For each parameter, a separate class exists inside the ",(0,n.jsx)(i.Z,{path:"TLS-Test-Framework/src/main/java/de/rub/nds/tlstest/framework/model/derivationParameter"})," package that defines how the parameter value is applied to the TLS-Attacker configuration."]}),"\n",(0,n.jsx)(t.p,{children:"How additional parameters and/or parameter values are used, is described on the next page."})]})}function p(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},1293:(e,t,s)=>{s.d(t,{Z:()=>d});s(7294);var n=s(7083);s(8846);const a={tag:"tag_sbMh"},i={ipm:{long:"Input Parameter Model",definition:"Contains all relevant test parameters and their values. The IPM is used to generate the test inputs (one value is assigned to each parameter) by using t-way combinatorial testing. Seperate IPMs are defined for each test template, depending on the requirement that the test template checks. Dynamically inserted constraints are applied to the IPM to ensure that for each parameter only values are used that are supported by the SUT."},sut:{long:"System Under Test",definition:"The TLS client or server that you want to test using TLS-Anvil."},"test input(s)?":{long:"Test Input",definition:"A test input is basically a dictionary that contains a single value for each parameter of an IPM. Test inputs are automatically generated from the IPM using t-way combinatorial testing. A test template is executed multiple times using a different test input for each execution."},"test template(s)?":{long:"Test Template",definition:"A test template defines the desired outcome for all test cases derived from it. Thus, it represents a test oracle that is applicable to all derived test cases. Each test template tests a different requirement and is implemented as a normal JUnit test. It basically consists of two building blocks. First it defines which TLS messages are sent and expected to be received by the test suite. Second, it defines when a test case succeeds or fails."},"test case(s)?":{long:"Test Case",definition:"A test case is the (automatically) instantiated version of test template with one specific test input."}};var r=s(5893);const l=Object.keys(i);function d(e){let{id:t}=e;const s=l.map((e=>[new RegExp(e,"i").test(t),e])).filter((e=>e[0]))[0][1],d=i[s];return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(n.ZP,{content:(0,r.jsx)(o,{details:d}),placement:"bottom",arrow:!0,hideOnClick:!0,children:(0,r.jsxs)("span",{className:a.tag,children:[t,"\xa0\u24d8"]})})})}function o(e){let{details:t}=e;return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",{children:t.long}),(0,r.jsx)("hr",{style:{marginTop:"4px",marginBottom:"4px"}}),(0,r.jsx)("div",{children:t.definition})]})}},6797:(e,t,s)=>{s.d(t,{Z:()=>a});s(7294);var n=s(5893);function a(e){let{path:t}=e;const s=t.replace(".java","").split("/").reverse();return(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("a",{href:"https://github.com/tls-attacker/TLS-Anvil/tree/main/"+t,children:s[0]})})}}}]);