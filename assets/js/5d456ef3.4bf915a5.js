"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[39],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},9109:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Advanced-Features/Config-Files","title":"Config Files","description":"As an alternative to configuring TLS-Anvil via command line parameters, you can use a config file in JSON format.","source":"@site/docs/03-Advanced-Features/01-Config-Files.md","sourceDirName":"03-Advanced-Features","slug":"/Advanced-Features/Config-Files","permalink":"/docs/Advanced-Features/Config-Files","draft":false,"unlisted":false,"editUrl":"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/03-Advanced-Features/01-Config-Files.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"TLS-Anvil Result Analysis","permalink":"/docs/Result-Analysis"},"next":{"title":"Profiles","permalink":"/docs/Advanced-Features/Profiles"}}');var t=s(4848),o=s(8453);const r={},a="Config Files",l={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"config-files",children:"Config Files"})}),"\n",(0,t.jsxs)(n.p,{children:["As an alternative to configuring TLS-Anvil via command line parameters, you can use a config file in JSON format.\nThe config file has to either contain a ",(0,t.jsx)(n.code,{children:"serverConfig"})," or ",(0,t.jsx)(n.code,{children:"clientConfig"})," section."]}),"\n",(0,t.jsxs)(n.p,{children:["Example config file ",(0,t.jsx)(n.code,{children:"myConfig.json"})," for a server scan:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:"showLineNumbers",children:'{\n  "anvilTestConfig" : {\n    "identifier" : "example_server_test",\n    "expectedResults" : "expected_results.json",\n    "profiles" : [ "example_profile" ],\n    "profileFolder" : "./profiles",\n    "ignoreCache" : false,\n    "parallelTestCases" : 5,\n    "parallelTests" : 7,\n    "strength" : 2,\n    "connectionTimeout" : 200,\n    "disableTcpDump" : false,\n    "doZip" : true\n  },\n  "serverConfig" : {\n    "host" : "localhost:8443",\n    "doNotSendSNIExtension" : false\n  },\n  "exportTraces" : false\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["All possible config options can be seen in the folder ",(0,t.jsx)(n.a,{href:"https://github.com/tls-attacker/TLS-Anvil/tree/main/config_examples",children:"config_examples"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["We can use the config file by invoking TLS-Anvil with the ",(0,t.jsx)(n.code,{children:"-tlsAnvilConfig"})," parameter."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"showLineNumbers",children:"docker run \\\n    --rm \\\n    -it \\\n    --name tls-anvil \\\n    --network tls-anvil \\\n    -v $(pwd):/output/ \\\n    -v ./myConfig.json:/myConfig.json \\\n    ghcr.io/tls-attacker/tlsanvil:latest \\\n    -tlsAnvilConfig /myConfig.json        \n"})})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);