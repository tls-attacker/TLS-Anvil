"use strict";(self.webpackChunktls_anvil_docs=self.webpackChunktls_anvil_docs||[]).push([[957],{7206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(5893),s=n(1151);const i={},a="Server Testing",o={id:"Quick-Start/Server-Testing",title:"Server Testing",description:"This site demonstrates how to test the OpenSSL server provided by the TLS-Docker-Library.",source:"@site/docs/01-Quick-Start/01-Server-Testing.md",sourceDirName:"01-Quick-Start",slug:"/Quick-Start/Server-Testing",permalink:"/docs/Quick-Start/Server-Testing",draft:!1,unlisted:!1,editUrl:"https://github.com/tls-attacker/TLS-Anvil/tree/main/Docs/docs/01-Quick-Start/01-Server-Testing.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/docs/Quick-Start/index"},next:{title:"Client Testing",permalink:"/docs/Quick-Start/Client-Testing"}},c={},l=[{value:"Preperations",id:"preperations",level:3},{value:"Starting the OpenSSL Server",id:"starting-the-openssl-server",level:3},{value:"Starting TLS-Anvil",id:"starting-tls-anvil",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"server-testing",children:"Server Testing"}),"\n",(0,r.jsx)(t.p,{children:"This site demonstrates how to test the OpenSSL server provided by the TLS-Docker-Library.\nTesting the server in the most simple form roughly takes around 5 minutes. However, this duration can increase to several depending on the strength parameter that that basically defines how often a single test case triggered with different parameters."}),"\n",(0,r.jsx)(t.h3,{id:"preperations",children:"Preperations"}),"\n",(0,r.jsxs)(t.p,{children:["The server we will use, is found in the ",(0,r.jsx)(t.a,{href:"https://github.com/tls-attacker/tls-docker-library",children:"TLS-Docker-Library"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Before the server is able to do anything we need to generate a TLS certificate. Inside the TLS-Docker-Library repo, run:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"./setup.sh\n"})}),"\n",(0,r.jsx)(t.p,{children:"Next we create a dedicated docker network that is used by the TLS-Anvil and OpenSSL server container to communicate with each other."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"docker network create tls-anvil\n"})}),"\n",(0,r.jsx)(t.h3,{id:"starting-the-openssl-server",children:"Starting the OpenSSL Server"}),"\n",(0,r.jsx)(t.p,{children:"As mentioned before, we use OpenSSL as an example. In this case the server uses an RSA certificate. However, TLS-Anvil works with any certificate and automatically adapts the tests to the given circumstances."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:"showLineNumbers",children:"docker run \\\n    -d \\\n    --rm \\\n    --name openssl-server \\\n    --network tls-anvil \\\n    -v cert-data:/certs/ \\\n    ghcr.io/tls-attacker/openssl-server:1.1.1i \\\n    -port 8443 \\\n    -cert /certs/rsa2048cert.pem \\\n    -key /certs/rsa2048key.pem\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Lines 2-6: Docker related command flags"}),"\n",(0,r.jsx)(t.li,{children:"Line 7: Specifies the Docker image from the TLS-Docker-Library"}),"\n",(0,r.jsxs)(t.li,{children:["Lines 8-10: Those flags are passed to the OpenSSL ",(0,r.jsx)(t.code,{children:"s_server"})," binary"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"starting-tls-anvil",children:"Starting TLS-Anvil"}),"\n",(0,r.jsx)(t.p,{children:"Finally TLS-Anvil is started. The current directory is mounted to the docker container and used to store the results."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",metastring:"showLineNumbers",children:"docker run \\\n    --rm \\\n    -it \\\n    -v $(pwd):/output/ \\\n    --name tls-anvil \\\n    --network tls-anvil \\\n    ghcr.io/tls-attacker/tlsanvil:latest \\\n    -outputFolder ./ \\\n    -parallelTestCases 1 \\\n    -connectionTimeout 200 \\\n    -strength 1 \\\n    -identifier openssl-server \\\n    server \\\n    -connect openssl-server:8443 \\\n    -doNotSendSNIExtension\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Lines 2-6: Docker related command flags"}),"\n",(0,r.jsx)(t.li,{children:"Line 7: Specifies the TLS-Anvil docker image"}),"\n",(0,r.jsx)(t.li,{children:"Line 9: Since the OpenSSL example server is single threaded, we can only perform one handshakes sequentially"}),"\n",(0,r.jsx)(t.li,{children:"Line 10: We run our server locally, so we can reduce the timeout to 200ms."}),"\n",(0,r.jsxs)(t.li,{children:["Line 11: Defines the strength, i.e. the ",(0,r.jsx)(t.code,{children:"t"})," for t-way combinatorial testing"]}),"\n",(0,r.jsx)(t.li,{children:"Line 13: We want to test a server."}),"\n",(0,r.jsx)(t.li,{children:"Line 14-15: Determines the details how TLS-Anvil should connect to the server."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var r=n(7294);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);